@model DRCTS.Models.RequestViewModel

@{
    ViewBag.Title = "Add Request";
}


<div class="row">
<div class="col-md-10">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h1>Disability Resource Center - Add Request</h1>
        </div>
        <div class="panel-body">
            <p>
                On this page you can add new requests. 
                The fields: OA, 
                            Employee First Name,            
                            Employee Last Name,
                            Employee Email,
                            Disability, Date Request Received, and Source are required (*).
            </p>
        </div>
        <!--<div class="panel-footer">
            Panel Footer
        </div>-->
    </div>
</div>
</div>

<br />

@Html.Partial("EditRequest")

@section crip {
    <script>
// Get the modal
var modal = document.getElementById('myModal');

// Get the button that opens the modal
var btn = document.getElementById("search66");

// Get the <span> element that closes the modal
var span = document.getElementsByClassName("close")[0];

// When the user clicks the button, open the modal 
/*btn.onclick = function() {
    //modal.style.display = "block";
    
    $("#dialog").dialog({
        modal: true,
        buttons: {
            Ok: function () {
                $(this).dialog("close");
            }
        }
    });
}

// When the user clicks on <span> (x), close the modal
span.onclick = function() {
    modal.style.display = "none";
}
*/
// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}
</script>

<!--
    <script type="text/javascript">
        $(document).ready(function () {
            var bootstrapButton = $.fn.button.noConflict() // return $.fn.button to previously assigned value
            $.fn.bootstrapBtn = bootstrapButton            // give $().bootstrapBtn the Bootstrap functionalit
            $('#DRCStatus').val("New");
            $('#OC').val("O");
            $('#avg').hide();
            $("#pr").hide();
            $(":input[data-inputmask-mask]").inputmask();
            $(":input[data-inputmask-alias]").inputmask();
            $(":input[data-inputmask-regex]").inputmask("Regex");
            $("#EmployeePhone").inputmask({ "mask": "(999) 999-9999" }); //specifying options
            $("#SupervisorPhone").inputmask({ "mask": "(999) 999-9999" }); //specifying options
            $("#DateRequestReceived").inputmask({
                alias: "mm/dd/yyyy",
                placeholder: "mm/dd/yyyy hh:mm:ss xm",
            });
            $("#COWADate").inputmask({
                alias: "mm/dd/yyyy",
                placeholder: "mm/dd/yyyy hh:mm:ss xm",
            });
            $("#DateFulfilled").inputmask({
                alias: "mm/dd/yyyy",
                placeholder: "mm/dd/yyyy hh:mm:ss xm",
            });
            $("#DateRequestReceivede").inputmask('datetime', {
                mask: "2/1/y h:s:s t\m",
                alias: "mm/dd/yyyy",
                placeholder: "mm/dd/yyyy hh:mm:ss xm",
                separator: '/',
                hourFormat: "12"
            });
            $.getJSON('../api/Employee', function (data) {

                //clear the current content of the select
                $('#Categories').empty();

                //iterate over the data and append a select option
                $.each(data, function (i, item) {
                    $('#Categories').append('<option value="' + item.ID + '">'
                        + item.EmployeeLastName + ',' + item.EmployeeFirstName + ': ' + item.EmployeeEmail + '</option>');
                })
            });
            $("#search").click(function () {
                $("#dialog").dialog({
                    modal: true,
                    closeOnEscape: true//,
                   /* buttons: {
                        Ok: function () {
                            $(this).dialog("close");
                        }
                    }*/
                });

            });

            $("#Categories").keydown(function (event) {
                if (event.keyCode == 13) {
                    // do something here
                   // getNames();
                  //  alert("You Pres Enter");
                    $.getJSON('../api/Employee/' + $(this).val(), function (data) {

                        //clear the current content of the select
                        // $('#Categories').empty();

                        //iterate over the data and append a select option
                        $.each(data, function (i, item) {

                            $("#EmployeeLastName").val(item.EmployeeLastName);
                            $("#EmployeeFirstName").val(item.EmployeeFirstName);
                            $("#EmployeeEmail").val(item.EmployeeEmail);
                        })
                    });
                    $("#dialog").dialog("close");
                }
            });
            $("#rSubmit").keydown(function (event) {
                if (event.keyCode == 13) {
                    // do something here
                    //alert("You Pres Enter");
                    $("#AddForm").submit();
                }
            });


       

        
        
            $("#Categories").on("click", function () {
                //alert($(this).val());
                //getNames();
                $.getJSON('../api/Employee/' + $(this).val(), function (data) {

                    //clear the current content of the select
                    // $('#Categories').empty();

                    //iterate over the data and append a select option
                    $.each(data, function (i, item) {

                        $("#EmployeeLastName").val(item.EmployeeLastName);
                        $("#EmployeeFirstName").val(item.EmployeeFirstName);
                        $("#EmployeeEmail").val(item.EmployeeEmail);
                    })
                });
                $("#dialog").dialog("close");
            });
       
            $("#search").keydown(function (event) {
                if (event.keyCode == 13) {
                    // do something here
                    $("#dialog").dialog({
                        modal: true,
                        closeOnEscape: true//,
                        /* buttons: {
                             Ok: function () {
                                 $(this).dialog("close");
                             }
                         }*/
                    });
                }
            });

            $("#rSubmit").keydown(function (event) {
                if (event.keyCode == 13) {
                    // do something here
                   // alert("You Pres Enter");
                    $("#AddForm").submit();
                }
            });
            $("#DateRequestReceived").on('change paste', function () {
               // alert($("#DateRequestReceived").val());
                statusCheck();
                var year = new Date($("#DateRequestReceived").val());
                //var qtrR = year.getFullYear() + "-" + getQuarter(e.date);
                var qtrR = getFYQ($("#DateRequestReceived").val());
                $('#QuarterReceived').val(qtrR);
                //alert(year.getFullYear());
            });
            $("#COWADate").on('change paste', function () {
               
                statusCheck();
            });
            $("#DateFulfilled").on('change paste', function () {

                statusCheck();
            });

        var options = {
            url: "../api/Employee",

            getValue: "EmployeeLastName",

            template: {
                type: "custom",
                method: function (value, item) {
                    return item.EmployeeLastName + "," + item.EmployeeFirstName + " - " + item.EmployeeEmail;
                }
            },

            list: {
                maxNumberOfElements: 10,
                match: {
                    enabled: true
                },
                onClickEvent: function () {

                    var value1 = $("#EmployeeLastName").getSelectedItemData().EmployeeFirstName;
                    var value2 = $("#EmployeeLastName").getSelectedItemData().EmployeeEmail;
                    var value3 = $("#EmployeeLastName").getSelectedItemData().EmployeeID;
                    $("#EmployeeFirstName").val(value1).trigger("change");
                    $("#EmployeeEmail").val(value2).trigger("change");
                    $("#EmployeeID").val(value3).trigger("change");
                }
            }
        };
        var options1 = {
            url: "../api/Employee",

            getValue: "EmployeeFirstName",

            template: {
                type: "custom",
                method: function (value, item) {
                    return item.EmployeeLastName + "," + item.EmployeeFirstName + " - " + item.EmployeeEmail;
                }
            },

            list: {
                maxNumberOfElements: 10,
                match: {
                    enabled: true
                },
                onClickEvent: function () {
                    
                    var value1 = $("#EmployeeFirstName").getSelectedItemData().EmployeeLastName;
                    var value2 = $("#EmployeeFirstName").getSelectedItemData().EmployeeEmail;
                    var value3 = $("#EmployeeFirstName").getSelectedItemData().EmployeeID;
                    $("#EmployeeLastName").val(value1).trigger("change");
                    $("#EmployeeEmail").val(value2).trigger("change");
                    $("#EmployeeID").val(value3).trigger("change");

                }
            }
        };
        $("#EmployeeFirstName").easyAutocomplete(options1);
        $("#EmployeeLastName").easyAutocomplete(options);
        
        $(function () {
            $('#DRCStatus').val("New");
            $('#OC').val("O");
            $('#avg').hide();
            /*$('#datetimepicker6').datetimepicker({
                format: 'MM/DD/YYYY',
                allowInputToggle: true
            });
            $('#datetimepicker7').datetimepicker({
                format: 'MM/DD/YYYY',
                allowInputToggle: true,
                useCurrent: false //Important! See issue #1075
            });
            $('#datetimepicker8').datetimepicker({
                format: 'MM/DD/YYYY',
                allowInputToggle: true,
                useCurrent: false //Important! See issue #1075
            });
            
            $("#datetimepicker6").on("dp.change", function (e) {
                $('#datetimepicker7').data("DateTimePicker").minDate(e.date);
                $('#datetimepicker8').data("DateTimePicker").minDate(e.date);
                statusCheck();
                var year = new Date(e.date);
                //var qtrR = year.getFullYear() + "-" + getQuarter(e.date);
                var qtrR = getFYQ(e.date);
                $('#QuarterReceived').val(qtrR);
                //alert(year.getFullYear());
    
                
            });
            
            $("#datetimepicker7").on("dp.change", function (e) {
                $('#datetimepicker6').data("DateTimePicker").maxDate(e.date);
                statusCheck();
            });
            $("#datetimepicker8").on("dp.change", function (e) {
                $('#datetimepicker6').data("DateTimePicker").maxDate(e.date);
                statusCheck();
            });*/
            $("#pr").hide();
        });
      
        
       
        $('#AnalystAssigned').on("change", function () {
          //  alert(33);
           // if ($("#AnalystAssigned option:selected").val().length > 1) {
                statusCheck();
           // } 
        })

        $('#DRCRequestType').on("change", function () {
           // alert($('#DRCRequestType').val());
            if ($('#DRCRequestType').val() == "RA") {
                $('#avg').show();
                var d1 = moment($("#DateRequestReceived").val()).format("YYYY-MM-DD");
                var d2 = moment($('#DateFulfilled').val()).format("YYYY-MM-DD");
                
                $('#TFToday').val(workingDaysBetweenDates(d1, d2));
               
            } else {
                //$('#TFToday').val("");
                $('#avg').hide();
            }
        })
        $('#Purchasing').on("change", function () {
           
            if ($("#Purchasing option:selected").val() == 2) {
                $("#pr").show();
            } else {
                $("#pr").hide();
            }
        })
        $("#test").hide();


       


        });
        function eSearch() {
            $("#dialog").dialog({
                modal: true,
                closeOnEscape: true//,
                /* buttons: {
                     Ok: function () {
                         $(this).dialog("close");
                     }
                 }*/
            });
        };
        function statusCheck() {
            
            if ($("#AnalystAssigned option:selected").val().length > 1) {

                if ($('#DateFulfilled').val().length == 0) {

                    if ($('#COWADate').val().length == 0) {
                        $('#DRCStatus').val("Open");
                        $('#OC').val("O");
                    } else {
                        $('#DRCStatus').val("Other");
                        $('#OC').val("O");
                    }

                } else {
                    $('#DRCStatus').val("Fulfilled");
                    $('#OC').val("C");
                }
            } else {
                $('#DRCStatus').val("New");
            }
            if ($('#DateFulfilled').val().length > 0) {
                $('#DateCompleted').val($('#DateFulfilled').val());
               
            } else if (($('#DateFulfilled').val().length == 0) && ($('#COWADate').val().length > 0)) {
                $('#DateCompleted').val($('#COWADate').val());
            } else {
                $('#DateCompleted').val("");
            }
           
        };

        function parseDate(input) {
            // Transform date from text to date
            var parts = input.match(/(\d+)/g);
            // new Date(year, month [, date [, hours[, minutes[, seconds[, ms]]]]])
            return new Date(parts[0], parts[1] - 1, parts[2]); // months are 0-based
        };
        function getFYQ(d) {
            d = new Date(d);
            var y;
            var m = Math.floor(d.getMonth() / 3) + 2;
            var q = m > 4 ? m - 4 : m;
            if (q == 1) {
                y = d.getFullYear() + 1;
            } else {
                y = d.getFullYear();
            }
            var qtrFY = y + "-" + q;
            return qtrFY;
        };
        
        function getQuarter(d) {
            d = new Date(d);
            var m = Math.floor(d.getMonth() / 3) + 2;
            return m > 4 ? m - 4 : m;
        };
        function workingDaysBetweenDates(d0, d1) {
            var holidays = JSON.parse($('#Holidays').val());
            //var holidays = ['2017-05-03', '2017-05-05'];
            var startDate = parseDate(d0);
            var endDate = parseDate(d1);
            // Validate input
            if (endDate < startDate) {
                return 0;
            }
            console.log("3 " + holidays[1]);
            console.log("cr " + startDate);
            // Calculate days between dates
            var millisecondsPerDay = 86400 * 1000; // Day in milliseconds
            startDate.setHours(0, 0, 0, 1);  // Start just after midnight
            endDate.setHours(23, 59, 59, 999);  // End just before midnight
            var diff = endDate - startDate;  // Milliseconds between datetime objects    
            var days = Math.ceil(diff / millisecondsPerDay);

            // Subtract two weekend days for every week in between
            var weeks = Math.floor(days / 7);
            days -= weeks * 2;

            // Handle special cases
            var startDay = startDate.getDay();
            var endDay = endDate.getDay();

            // Remove weekend not previously removed.   
            if (startDay - endDay > 1) {
                days -= 2;
            }
            // Remove start day if span starts on Sunday but ends before Saturday
            if (startDay == 0 && endDay != 6) {
                days--;
            }
            // Remove end day if span ends on Saturday but starts after Sunday
            if (endDay == 6 && startDay != 0) {
                days--;
            }
            /* Here is the code */
            for (var i in holidays) {
                if ((holidays[i] >= d0) && (holidays[i] <= d1)) {
                    days--;
                }
            }
            return days;
        };
        function mpop() {
           // alert("test");
            $("#dialog").dialog();
        };
        function getNames() {
            $.getJSON('../api/Employee/' + $(this).val(), function (data) {

                //clear the current content of the select
                // $('#Categories').empty();

                //iterate over the data and append a select option
                $.each(data, function (i, item) {

                    $("#EmployeeLastName").val(item.EmployeeLastName);
                    $("#EmployeeFirstName").val(item.EmployeeFirstName);
                    $("#EmployeeEmail").val(item.EmployeeEmail);
                })
            });
        }



    </script>

    <script src="../../Scripts/RequestScript.js"></script>
    -->


<script src="~/Scripts/RequestScript.js"></script>

    }
